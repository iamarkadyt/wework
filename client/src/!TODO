Current task breakdown:
    POLLING
        polling endpointS: 
        /poll/messages
            - req.user.id
        /poll/posts
            - req.user.id
            - freshestLoadedPostId
            - send POSITIVE if freshest post id doesn't match to freshest post id in DB
            - send NEGATIVE otherwise
        /poll/comments/:postId
            - postId
            - freshestLoadedCommentId
            - same as with posts: send positive if fresher comments were found in DB
            - send negative otherwise

        upon the receiving of signal 'POSITIVE':
            - for posts: show popup button 'new posts'
            - for comments: force em down
            - for messages: force em ofc

    LIVE LOADING
        Live loading is totally independent mechanism that relies on:
            - oldestLoadedPostId
            - oldestLoadedCommentId
            - oldestLoadedMessage
        when scrolling reaches the point where update is required: 
            - we send the current oldestIds
            - show spinner
            - receive another 10-30 items or timeout with error popup
            - update oldestIds
            - display content

    START SMALL
        Actions:
            - addPost (insert returned POST into feed top, DO NOT CAUSE FEED UPDATE)
            - likePost (return whole user's likes array on success) 
            - leaveCommentOnPost (return whole thread on successfull post)
            - pollForPosts(oldestLoadedPostId)
                on { gotNew: true }:
                    * show popup new posts (what TYPE to dispatch? mb lets return posts right away?)
                    * on click fetchPosts() { dispatch(FEED_UPDATE) }
        Types:
            - FEED_UPDATE
            - COMMENTS_UPDATE (for current thread only, reset after leaving)
            

add forgetFormErrors action
create an endpoint for feed, create (a separate?) db with fake profiles and posts data
fetch feed
implement live loading (live pagination)
restyle comment and reply components
use IDs as list keys;

mark mandatory fields with asterisks
display person's website at the place of 'See Activity' button, move buttons to 3rd col.
Add Follow button.
- loading screen (reddit like style: page filled with text shapes)

follow BEM naming model for all stylesheets across the app


[SKIP] scroll only overlay: https://stackoverflow.com/questions/9280258/prevent-body-scrolling-but-allow-overlay-scrolling
[SKIP] Should overlay be within other forms too?
    Certainly should be for the modal window, but with forms the idea is that
    they may be used without one on smaller screens. 
[SKIP] Yup: output all errors for [social] schema. (mixed.withMutation(...)?)
[SKIP] Do not pass overlayId to modal? Let it have own one?
[SKIP] Pass form to generic modal component with buttons?
[SKIP] Use overlay inside of AddEdu and AddExp? Would be able to dismiss then, access overlayId?
[SKIP] Buttons together at the AddEdu & AddExp forms!